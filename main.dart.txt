import 'dart:convert';import 'package:flutter/material.dart';import 'package:http/http.dart' as http;import 'package:flutter/services.dart' show rootBundle;void main() {  runApp(const WeatherApp());}class WeatherApp extends StatelessWidget {  const WeatherApp({super.key});  @override  Widget build(BuildContext context) {    return MaterialApp(      title: 'Időjárás',      theme: ThemeData(        primarySwatch: Colors.blue,      ),      home: const WeatherScreen(),    );  }}class WeatherScreen extends StatefulWidget {  const WeatherScreen({super.key});  @override  State<WeatherScreen> createState() => _WeatherScreenState();}class _WeatherScreenState extends State<WeatherScreen> {  String temperature = "";  String description = "";  String iconCode = "";  bool offlineMode = false;  final String apiKey = "25adbc2dc74d89559ee60d7b2cf7d013";  @override  void initState() {    super.initState();    fetchWeather();  }  Future<void> fetchWeather() async {    const city = "Budapest";    final url =        "https://api.openweathermap.org/data/2.5/weather?q=$city&appid=$apiKey&units=metric&lang=hu";    try {      final response = await http.get(Uri.parse(url));      if (response.statusCode == 200) {        final data = json.decode(response.body);        setState(() {          temperature = "${data['main']['temp'].round()}°C";          description = data['weather'][0]['description'];          iconCode = data['weather'][0]['icon'];          offlineMode = false;        });      } else {        loadOfflineData();      }    } catch (e) {      loadOfflineData();    }  }  Future<void> loadOfflineData() async {    final jsonString = await rootBundle.loadString("assets/sample_weather.json");    final data = json.decode(jsonString);    setState(() {      temperature = "${data['main']['temp'].round()}°C";      description = data['weather'][0]['description'];      iconCode = data['weather'][0]['icon'];      offlineMode = true;    });  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colors.blue.shade50,      body: Center(        child: temperature.isEmpty            ? const CircularProgressIndicator()            : Column(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  Image.asset("assets/icon.png", width: 120),                  const SizedBox(height: 20),                  Text(                    temperature,                    style: const TextStyle(                      fontSize: 48,                      fontWeight: FontWeight.bold,                      color: Colors.black87,                    ),                  ),                  Text(                    description[0].toUpperCase() + description.substring(1),                    style: const TextStyle(                      fontSize: 24,                      color: Colors.black54,                    ),                  ),                  const SizedBox(height: 10),                  if (offlineMode)                    const Text(                      "Offline mód",                      style: TextStyle(color: Colors.redAccent),                    ),                ],              ),      ),    );  }}